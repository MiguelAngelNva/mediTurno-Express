{"ast":null,"code":"import { auth } from './firebaseConfig';\nimport { signOut, onAuthStateChanged } from 'firebase/auth';\nlet userListener = null;\nfunction parseJwt(token) {\n  try {\n    return JSON.parse(atob(token.split('.')[1]));\n  } catch {\n    return null;\n  }\n}\nfunction isTokenExpired(token) {\n  const payload = parseJwt(token);\n  if (!payload) return true;\n  const now = Math.floor(Date.now() / 1000);\n  return payload.exp < now;\n}\nexport async function getValidToken() {\n  const user = auth.currentUser;\n  if (!user) return null;\n  try {\n    const token = await user.getIdToken(true);\n    if (isTokenExpired(token)) {\n      await logout();\n      return null;\n    }\n    return token;\n  } catch {\n    await logout();\n    return null;\n  }\n}\nexport function subscribeToAuthChanges(callback) {\n  if (userListener) userListener(); // remove previous\n  userListener = onAuthStateChanged(auth, async user => {\n    if (user) {\n      const token = await user.getIdToken();\n      if (isTokenExpired(token)) {\n        await logout();\n        callback(null);\n      } else {\n        localStorage.setItem('jwt', token);\n        callback(user);\n      }\n    } else {\n      localStorage.removeItem('jwt');\n      callback(null);\n    }\n  });\n}\nexport async function logout() {\n  await signOut(auth);\n  localStorage.removeItem('jwt');\n}\nexport async function fetchWithAuth(url, options = {}) {\n  const token = await getValidToken();\n  if (!token) {\n    throw new Error('Sesi칩n expirada o inv치lida');\n  }\n  return fetch(url, {\n    ...options,\n    headers: {\n      ...options.headers,\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }\n  });\n}","map":{"version":3,"names":["auth","signOut","onAuthStateChanged","userListener","parseJwt","token","JSON","parse","atob","split","isTokenExpired","payload","now","Math","floor","Date","exp","getValidToken","user","currentUser","getIdToken","logout","subscribeToAuthChanges","callback","localStorage","setItem","removeItem","fetchWithAuth","url","options","Error","fetch","headers","Authorization"],"sources":["C:/Users/juanr/Documents/Firebase-Mediturno/mediTurno-Express/Frontend/src/auth/authService.js"],"sourcesContent":["import { auth } from './firebaseConfig';\r\nimport { signOut, onAuthStateChanged } from 'firebase/auth';\r\n\r\nlet userListener = null;\r\n\r\nfunction parseJwt(token) {\r\n  try {\r\n    return JSON.parse(atob(token.split('.')[1]));\r\n  } catch {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction isTokenExpired(token) {\r\n  const payload = parseJwt(token);\r\n  if (!payload) return true;\r\n  const now = Math.floor(Date.now() / 1000);\r\n  return payload.exp < now;\r\n}\r\n\r\nexport async function getValidToken() {\r\n  const user = auth.currentUser;\r\n  if (!user) return null;\r\n\r\n  try {\r\n    const token = await user.getIdToken(true);\r\n    if (isTokenExpired(token)) {\r\n      await logout();\r\n      return null;\r\n    }\r\n    return token;\r\n  } catch {\r\n    await logout();\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function subscribeToAuthChanges(callback) {\r\n  if (userListener) userListener(); // remove previous\r\n  userListener = onAuthStateChanged(auth, async (user) => {\r\n    if (user) {\r\n      const token = await user.getIdToken();\r\n      if (isTokenExpired(token)) {\r\n        await logout();\r\n        callback(null);\r\n      } else {\r\n        localStorage.setItem('jwt', token);\r\n        callback(user);\r\n      }\r\n    } else {\r\n      localStorage.removeItem('jwt');\r\n      callback(null);\r\n    }\r\n  });\r\n}\r\n\r\nexport async function logout() {\r\n  await signOut(auth);\r\n  localStorage.removeItem('jwt');\r\n}\r\n\r\nexport async function fetchWithAuth(url, options = {}) {\r\n  const token = await getValidToken();\r\n  if (!token) {\r\n    throw new Error('Sesi칩n expirada o inv치lida');\r\n  }\r\n\r\n  return fetch(url, {\r\n    ...options,\r\n    headers: {\r\n      ...options.headers,\r\n      Authorization: `Bearer ${token}`,\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n}\r\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,SAASC,OAAO,EAAEC,kBAAkB,QAAQ,eAAe;AAE3D,IAAIC,YAAY,GAAG,IAAI;AAEvB,SAASC,QAAQA,CAACC,KAAK,EAAE;EACvB,IAAI;IACF,OAAOC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9C,CAAC,CAAC,MAAM;IACN,OAAO,IAAI;EACb;AACF;AAEA,SAASC,cAAcA,CAACL,KAAK,EAAE;EAC7B,MAAMM,OAAO,GAAGP,QAAQ,CAACC,KAAK,CAAC;EAC/B,IAAI,CAACM,OAAO,EAAE,OAAO,IAAI;EACzB,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACH,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;EACzC,OAAOD,OAAO,CAACK,GAAG,GAAGJ,GAAG;AAC1B;AAEA,OAAO,eAAeK,aAAaA,CAAA,EAAG;EACpC,MAAMC,IAAI,GAAGlB,IAAI,CAACmB,WAAW;EAC7B,IAAI,CAACD,IAAI,EAAE,OAAO,IAAI;EAEtB,IAAI;IACF,MAAMb,KAAK,GAAG,MAAMa,IAAI,CAACE,UAAU,CAAC,IAAI,CAAC;IACzC,IAAIV,cAAc,CAACL,KAAK,CAAC,EAAE;MACzB,MAAMgB,MAAM,CAAC,CAAC;MACd,OAAO,IAAI;IACb;IACA,OAAOhB,KAAK;EACd,CAAC,CAAC,MAAM;IACN,MAAMgB,MAAM,CAAC,CAAC;IACd,OAAO,IAAI;EACb;AACF;AAEA,OAAO,SAASC,sBAAsBA,CAACC,QAAQ,EAAE;EAC/C,IAAIpB,YAAY,EAAEA,YAAY,CAAC,CAAC,CAAC,CAAC;EAClCA,YAAY,GAAGD,kBAAkB,CAACF,IAAI,EAAE,MAAOkB,IAAI,IAAK;IACtD,IAAIA,IAAI,EAAE;MACR,MAAMb,KAAK,GAAG,MAAMa,IAAI,CAACE,UAAU,CAAC,CAAC;MACrC,IAAIV,cAAc,CAACL,KAAK,CAAC,EAAE;QACzB,MAAMgB,MAAM,CAAC,CAAC;QACdE,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,MAAM;QACLC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEpB,KAAK,CAAC;QAClCkB,QAAQ,CAACL,IAAI,CAAC;MAChB;IACF,CAAC,MAAM;MACLM,YAAY,CAACE,UAAU,CAAC,KAAK,CAAC;MAC9BH,QAAQ,CAAC,IAAI,CAAC;IAChB;EACF,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeF,MAAMA,CAAA,EAAG;EAC7B,MAAMpB,OAAO,CAACD,IAAI,CAAC;EACnBwB,YAAY,CAACE,UAAU,CAAC,KAAK,CAAC;AAChC;AAEA,OAAO,eAAeC,aAAaA,CAACC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACrD,MAAMxB,KAAK,GAAG,MAAMY,aAAa,CAAC,CAAC;EACnC,IAAI,CAACZ,KAAK,EAAE;IACV,MAAM,IAAIyB,KAAK,CAAC,4BAA4B,CAAC;EAC/C;EAEA,OAAOC,KAAK,CAACH,GAAG,EAAE;IAChB,GAAGC,OAAO;IACVG,OAAO,EAAE;MACP,GAAGH,OAAO,CAACG,OAAO;MAClBC,aAAa,EAAE,UAAU5B,KAAK,EAAE;MAChC,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}