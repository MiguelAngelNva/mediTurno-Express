{"ast":null,"code":"import { fetchWithAuth } from '../../auth/authService';\nconst API_URL = 'http://localhost:4000/pacientes';\nexport async function obtenerPacientes() {\n  const res = await fetchWithAuth(API_URL);\n  return res.json();\n}\nexport async function crearPaciente(pacientes) {\n  const res = await fetchWithAuth(API_URL, {\n    method: 'POST',\n    body: JSON.stringify(pacientes)\n  });\n  return res.json();\n}\nexport async function actualizarPaciente(id, pacientes) {\n  const res = await fetchWithAuth(`${API_URL}/${id}`, {\n    method: 'PUT',\n    body: JSON.stringify(pacientes)\n  });\n  return res.json();\n}\nexport async function eliminarPaciente(id) {\n  const res = await fetchWithAuth(`${API_URL}/${id}`, {\n    method: 'DELETE'\n  });\n  if (res.status === 204) return {}; // No Content, respuesta vacía aceptable\n\n  return res.json(); // solo si hay cuerpo\n}","map":{"version":3,"names":["fetchWithAuth","API_URL","obtenerPacientes","res","json","crearPaciente","pacientes","method","body","JSON","stringify","actualizarPaciente","id","eliminarPaciente","status"],"sources":["C:/Users/juanr/Documents/Firebase-Mediturno/mediTurno-Express/Frontend/src/modules/pacientes/PacientesService.js"],"sourcesContent":["import { fetchWithAuth } from '../../auth/authService';\r\n\r\nconst API_URL = 'http://localhost:4000/pacientes';\r\n\r\nexport async function obtenerPacientes() {\r\n  const res = await fetchWithAuth(API_URL);\r\n  return res.json();\r\n}\r\n\r\nexport async function crearPaciente(pacientes) {\r\n  const res = await fetchWithAuth(API_URL, {\r\n    method: 'POST',\r\n    body: JSON.stringify(pacientes)\r\n  });\r\n  return res.json();\r\n}\r\n\r\nexport async function actualizarPaciente(id, pacientes) {\r\n  const res = await fetchWithAuth(`${API_URL}/${id}`, {\r\n    method: 'PUT',\r\n    body: JSON.stringify(pacientes)\r\n  });\r\n  return res.json();\r\n}\r\n\r\nexport async function eliminarPaciente(id) {\r\n  const res = await fetchWithAuth(`${API_URL}/${id}`, {\r\n    method: 'DELETE'\r\n  });\r\n\r\n  if (res.status === 204) return {}; // No Content, respuesta vacía aceptable\r\n\r\n  return res.json(); // solo si hay cuerpo\r\n}"],"mappings":"AAAA,SAASA,aAAa,QAAQ,wBAAwB;AAEtD,MAAMC,OAAO,GAAG,iCAAiC;AAEjD,OAAO,eAAeC,gBAAgBA,CAAA,EAAG;EACvC,MAAMC,GAAG,GAAG,MAAMH,aAAa,CAACC,OAAO,CAAC;EACxC,OAAOE,GAAG,CAACC,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeC,aAAaA,CAACC,SAAS,EAAE;EAC7C,MAAMH,GAAG,GAAG,MAAMH,aAAa,CAACC,OAAO,EAAE;IACvCM,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS;EAChC,CAAC,CAAC;EACF,OAAOH,GAAG,CAACC,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeO,kBAAkBA,CAACC,EAAE,EAAEN,SAAS,EAAE;EACtD,MAAMH,GAAG,GAAG,MAAMH,aAAa,CAAC,GAAGC,OAAO,IAAIW,EAAE,EAAE,EAAE;IAClDL,MAAM,EAAE,KAAK;IACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS;EAChC,CAAC,CAAC;EACF,OAAOH,GAAG,CAACC,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeS,gBAAgBA,CAACD,EAAE,EAAE;EACzC,MAAMT,GAAG,GAAG,MAAMH,aAAa,CAAC,GAAGC,OAAO,IAAIW,EAAE,EAAE,EAAE;IAClDL,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,IAAIJ,GAAG,CAACW,MAAM,KAAK,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEnC,OAAOX,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}